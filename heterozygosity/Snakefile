import pandas as pd
from pathlib import Path


def avalible_projects():
    project_dir_path = Path("/scratch2/erik/stairway/projects")
    project_names = [project.name for project in project_dir_path.iterdir() if project.is_dir()]

    projects = []
    project_dir_str = "/scratch2/erik/stairway/projects/"
    for project in project_names:
        project = project.strip()
        vcf = project + "/pav_" + project + "_SNVs_cleaned.vcf.gz"
        project_vcf = project_dir_str + vcf
        exist_vcf = Path(project_vcf)
        if exist_vcf.is_file():
            projects.append(project)
    print(projects)
    return projects

PROJECTS = avalible_projects()
#PROJECTS=["58-Spea"]



rule all:
    input:
        expand("het_sites/{project_id}_heterozygos_sites.txt", project_id=PROJECTS),
        expand("alignable_seq_counts/{project_id}_count.txt", project_id=PROJECTS),
        expand("hetrozygosity_values/{project_id}_hetrozygosity.txt", project_id=PROJECTS)

rule get_heterozygos_sites:
'''
Grabs the total number of heterozygous sites in the SNV vcf file generated by PAV.
Input = SNV vcf file. 
'''
    input:
        SNV_vcf = "/scratch2/erik/stairway/projects/{project_id}/pav_{project_id}_SNVs_cleaned.vcf.gz"
    output:
        het_sites = "het_sites/{project_id}_heterozygos_sites.txt"
    conda:
        "/scratch2/erik/stairway/envs/bcftools.yml"
    shell:
        """
        bcftools view -g het {input.SNV_vcf} | grep -v "^#" | wc -l > {output.het_sites}
        """

# def get_ref_genome(wildcards):
#     proj_id = wildcards.project_id
#     ref_dir = "/scratch2/erik/stairway/projects/" + proj_id.strip() + "/genome/hap1/"
#     ref_files = [f for f in os.listdir(ref_dir) if f.endswith('.fa')]

#     if ref_files:
#         return os.path.join(ref_dir, ref_files[0])
#     else:
#         raise FileNotFoundError(f"No .fa files found in {ref_dir}")

# rule bp_count_ref_genome:
#     input:
#         ref_path=get_ref_genome
#     output:
#         ref_genome_size = "ref_genome_sizes/{project_id}_size.txt"
#     shell:
#         """
#         grep -v ">" {input.ref_path} | tr -d '\n' | wc -c > {output.ref_genome_size}
#         """

rule alignable_sequence_count:
'''
Counts all callable regions "start bp to stop bp" using the callable sites bed file genereated by PAV.
'''
    input:
        bed_file = "/scratch2/erik/stairway/projects/{project_id}/results/{project_id}/callable/callable_regions_h1_500.bed"
    output:
        callable_sites = "alignable_seq_counts/{project_id}_count.txt"
    script:
        "scripts/alignable_sequence_sum_pandas.py"

rule calc_heterozygosity:
'''
Calculates heterozygosity & generates txt file output.
'''
    input:
        callable_sites = "alignable_seq_counts/{project_id}_count.txt",
        het_sites = "het_sites/{project_id}_heterozygos_sites.txt"
    output:
        heterozygosity_values = "hetrozygosity_values/{project_id}_hetrozygosity.txt"
    shell:
        """
        het_sites=$(cat {input.het_sites})
        callable_sites=$(cat {input.callable_sites})
        heterozyg=$(echo "scale=6; $het_sites / $callable_sites" | bc)
        echo "{wildcards.project_id},$het_sites,$callable_sites,$heterozyg" > {output.heterozygosity_values}
        """